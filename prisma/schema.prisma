// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  roleId     Int
  role       Role       @relation(fields: [roleId], references: [id])
  companies  Company[]  @relation("UserCompanies")
  rentals    Rental[]  @relation("UserRentals")
  refreshTokens RefreshToken[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique // ADMIN, GERENTE, FINANCEIRO, etc.
  users User[]
}

model Company {
  id         Int        @id @default(autoincrement())
  name       String
  cnpj       String     @unique
  users      User[]     @relation("UserCompanies")
  partners   Partner[]
  properties Property[]
  documents  Document[] // contratos, alvará, etc.
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Partner {
  id         Int        @id @default(autoincrement())
  name       String
  cpf        String     @unique
  documents  Document[]
  companyId  Int
  company    Company    @relation(fields: [companyId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  url        String   // link no S3
  type       String   // ex: "CONTRATO SOCIAL", "ALVARÁ"
  partnerId  Int?     // opcional, se o documento for de um sócio
  companyId  Int?     // opcional, se o documento for da empresa
  partner    Partner? @relation(fields: [partnerId], references: [id])
  company    Company? @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
}

model Property {
  id                Int       @id @default(autoincrement())
  title             String    // ex: "Desemb. L.N. do Carmo, 670 - Apto 101 Bl. E-1"
  type              String    // ex: "Imóvel"
  currentOwner      String    // Propriedade Atual
  manager           String?   // Responsável ADM
  iptuResponsible   String?   // Responsável IPTU
  acquisitionValue  Decimal?  @db.Decimal(12,2) // Vlt Aquisição
  registration      String?   // Matrícula
  registrationDoc   String?   // Matricula_doc
  registrationName  String?   // Matricula nome
  registrationDate  DateTime? // Dt Averbação
  registryOffice    String?   // Cartório
  inscription       String?   // Inscrição
  inscriptionName   String?   // Inscrição nome
  commonArea        Decimal?  @db.Decimal(10,2) // Área Comum
  privateArea       Decimal?  @db.Decimal(10,2) // Área Privativa
  totalArea         Decimal?  @db.Decimal(10,2) // Área Total
  companyId         Int
  company           Company   @relation(fields: [companyId], references: [id])
  rentals           Rental[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}


model Rental {
  id         Int       @id @default(autoincrement())
  propertyId Int
  property   Property  @relation(fields: [propertyId], references: [id])
  tenantId   Int
  tenant     User      @relation("UserRentals", fields: [tenantId], references: [id])
  startDate  DateTime
  endDate    DateTime
  dueDay     Int
  value      Decimal   @db.Decimal(10,2)
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model Payment {
  id         Int        @id @default(autoincrement())
  rentalId   Int
  rental     Rental     @relation(fields: [rentalId], references: [id])
  amount     Decimal    @db.Decimal(10,2)
  dueDate    DateTime
  paidDate   DateTime?
  status     String     // pago, atrasado, pendente
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
